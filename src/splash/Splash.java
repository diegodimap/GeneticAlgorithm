/*
 * Splash.java
 *
 * Created on 28 de Fevereiro de 2000, 22:18
 */

package splash;

import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import sound.WavPlay;

/**
 *
 * @author  Administrador
 */
public class Splash extends javax.swing.JWindow {
    public File f = new File("");
    public sound.WavPlay especial = new WavPlay(f.getAbsolutePath() + "\\src\\sound\\inicio.wav");
    public static Splash s = new Splash();
    
    /** Creates new form Splash */
    public Splash() {
        try {
            initComponents();
//            UIManager.setLookAndFeel(new WindowsLookAndFeel());
            barrinha();
        } catch (Exception ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barra = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/uern.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addComponent(barra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
 //                   UIManager.setLookAndFeel(new WindowsLookAndFeel());
                    s.setVisible(true);
                    s.setLocationRelativeTo(null);
                } catch (Exception ex) {
                    Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barra;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
    private void barrinha(){
        new Thread() {
            @Override
            public void run() {
                som();
                try {
                    for (int i = barra.getMinimum(); i <= barra.getMaximum(); i++) {
                        barra.setValue(i);
                        Thread.sleep((int) (Math.random() / Math.random() * 10));
                        if (barra.getValue() == 100) {
                            s.setVisible(false);
                            s.dispose();
                            new gui.AGGui().setVisible(true);
                        }
                    }
                } catch (InterruptedException ex) {
                    System.out.println(ex);
                }
            }
        }.start();
    }
    
    public void som(){
        new Thread(){
            @Override
            public void run(){
                especial.run();
            }
        }.start();
    }

//    private void setDefaultCloseOperation(int DISPOSE_ON_CLOSE) {
////        throw new UnsupportedOperationException("Not yet implemented");
//    }
//    
}
